@use "sass:math";

@function toRem($px, $current: 16) {
  $result: math.div($px, $current) * 1rem;
  @return $result;
}

@function toEm($px, $base: 16) {
  @return math.div($px, $base) * 1em;
}

$minWidth: 320;
$maxWidth: 1920;
$maxWidthContainer: 1320;
$containerPadding: 30;

//breakpoints for media quary
$containerWidth: $maxWidthContainer + $containerPadding;

$pc: $containerWidth;
$tablet: 991.98;
$mobile: 767.98;
$mobileSmall: 479.98;

@mixin adaptiveValue($property, $startSize, $minSize: $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
	@if ($startSize == 0) {
		$startSize: 0.000001;
	}

	@if ($minSize == 0) {
		$minSize: 0.000001;
	}

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-поїнти в EM
	$widthFromMedia: toEm($widthFrom);
	$widthToMedia: toEm($widthTo);

	// Формула плаваючого значення
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	// $flyValue: #{$yIntersection}px " + " #{$slope * 100}vw;
  
  $flyValue: #{math.round($yIntersection, 2)}px + #{math.round($slope * 100, 2)}vw;

	// Отримання значення властивості
	$propertyValue: #{"clamp(" #{$minSize}px "," $flyValue "," #{$startSize}px ")"};
	// Якщо негативні значення
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" #{$startSize}px "," $flyValue "," #{$minSize}px ")"};
	}

	// Встановлюємо значення за замовчуванням
	@if $keepSize != 1 and $keepSize != 3 {
		@media (min-width: $widthFromMedia) {
			#{$property}: #{$startSize}px;
		}
	}
	// Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		#{$property}: $propertyValue;
	}
	@if $keepSize != 1 and $keepSize != 2 {
		@media (max-width: $widthToMedia) {
			#{$property}: #{$minSize}px;
		}
	}
}

@mixin typography($size: "B", $weight: 400, $sizeMob: 0) {
  $fontSize: 14;
  $fontWeight: $weight;
  $lineHeight: 1;

  @if ($size == "XT") {
    $fontSize: 11;
    line-height: 1.3;
  }

  @if ($size == "T") {
    $fontSize: 12;
    line-height: 1.3;
  }

  @if ($size == "S") {
    $fontSize: 14;
    // $lineHeight: 1.5;

    @if ($weight == 600) {
      $lineHeight: 1.2;
    }
  }

  @if ($size == "M") {
    $fontSize: 16;
    // $lineHeight: 1.5;

    @if ($weight == 600) {
      $lineHeight: 1.2;
    }
  }

  @if ($size == "L") {
    $fontSize: 18;
    // $lineHeight: 1.5;
  }

  @if ($size == "XL") {
    $fontSize: 20;
    // $lineHeight: 1.5;
  }

  @if ($size == "XXL") {
    $fontSize: 24;
    // $lineHeight: 1.5;
  }

  @if ($size == "h1") {
    $fontSize: 56;
    line-height: 1.2;
  }

  @if ($size == "h2") {
    $fontSize: 48;
    line-height: 1.2;
  }

  @if ($size == "h3") {
    $fontSize: 40;
    line-height: 1.2;
  }

  @if ($size == "h4") {
    $fontSize: 36;
    line-height: 1.2;
  }

  @if ($size == "h5") {
    $fontSize: 32;
    line-height: 1.2;
  }

  @if ($size == "d1") {
    $fontSize: 72;
    line-height: 1.2;
  }

  font-size: toRem($fontSize);
  font-weight: $fontWeight;
  line-height: $lineHeight;
  // @include adaptiveValue("fontSize", $fontSize, math.div($fontSize, 3));
  // font-weight: $fontWeight;
}
